相关数据结构
1 process代表一个单独的进程，包含pid运行状态以及下一个process指针等信息
2 job代表一个任务，由一系列的process组成。数据结构中包含下一个job，第一个process指针,process group id,标准输入输出和错误，以及终端状态等信息

shell初始化
在执行任务管理之前，必须确保shell进程是交互模式运行于前台。
同时shell应该忽略一些任务控制信号以防止自身被信号中断。

启动任务
当shell能进行任务管理时，它就可以接受用户的输入并执行任务了。
所有在shell中运行的进程都是当前shell的子进程，为了防止不必要的况态条件产生，子进程和shell会分别调用setpgid方法将子进程放入子进程的pgid，pgid为shell第一个进程的pid。
子进程同时还必须重高信号动作，因为shell在初始化时忽略了这些信号而子进程会默认地继承这些设定。
最后子进程调用exec函数执行任务，重定向的操作也在此时进行。

关于前台和后台
当前台任务启动时，必须调用tcsetpgrp函数将终端控制权交给当前任务，然后shell会等待任务的结束，然后再次调用tcsetpgrp函数重新获得终端控制权。在这个过程中，shell必须保存和恢复终端状态的一些信息。
执行后台任务时，shell继续接受用户输入并分行命令。

停止和终止的任务
当一个前台任务被执行时，shell必须进入阻塞状态直到所有的任务进程停止或终止，这可以通过调用waitpid函数来实现，使用WUNTRACED选项可开启任务停止和终止时的状态报告。
使用WNOHANG选项可以获得后台任务的终止和停止状态信息，提示输入新的命令时是执行此检查的一个适当时机。

继续中止的的任务
shell可以通过发送SIGCONT信号给process group来继续中止的任务，如果任务是前台的，shell首先通过tcsetpgrp给予终端控制权，并恢复保存的终端状态。
shell通过put_job_in_foreground和put_job_in_background来将新建和中止的任务放入前台或者后台。

